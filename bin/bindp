#!/bin/bash

# Function to display usage information
usage() {
    echo "Usage: $0 IP[:PORT] | INTERFACE[:PORT] command [args...]"
    exit 1
}

# Check if at least two arguments are provided
if [ "$#" -lt 2 ]; then
    usage
fi

# Extract the first argument (IP[:PORT] or INTERFACE[:PORT])
ADDR_PORT="$1"

# Shift arguments so that the remaining ones represent the command
shift

# Function to check if a string is a valid IP address
is_valid_ip() {
    local ip="$1"
    local stat=1

    if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip_array=($ip)
        IFS=$OIFS
        [[ ${ip_array[0]} -le 255 && ${ip_array[1]} -le 255 && ${ip_array[2]} -le 255 && ${ip_array[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# Function to resolve interface name to IP address
get_ip_from_interface() {
    local iface="$1"
    ip addr show "$iface" | grep -w 'inet' | awk '{print $2}' | cut -d'/' -f1 | head -n1
}

# Initialize variables
IP=""
PORT=""
REUSE_PORT=""
BIND_PORT=""

# Check if ADDR_PORT contains a colon (i.e., has a port)
if [[ "$ADDR_PORT" == *:* ]]; then
    ADDR="${ADDR_PORT%%:*}"
    PORT="${ADDR_PORT##*:}"
    export REUSE_PORT=1
    export BIND_PORT="$PORT"
else
    ADDR="$ADDR_PORT"
    # Unset REUSE_PORT and BIND_PORT if they were previously set
    unset REUSE_PORT
    unset BIND_PORT
fi

# Determine if ADDR is an IP address or interface name
if is_valid_ip "$ADDR"; then
    IP="$ADDR"
else
    # Assume it's an interface name; attempt to get IP
    IP=$(get_ip_from_interface "$ADDR")
    if [ -z "$IP" ]; then
        echo "Error: Unable to retrieve IP address for interface '$ADDR'"
        exit 1
    fi
fi

# Set common environment variables
export REUSE_ADDR=1
export BIND_ADDR="$IP"

# Set the path to libindp.so
LIBINDP_PATH="/usr/lib/libindp.so"  # Adjust the path if necessary

# Run the provided command with LD_PRELOAD
LD_PRELOAD="$LIBINDP_PATH" "$@"

